# Source files
SET( SOURCES
	mainwindow.cpp
	${CMAKE_SOURCE_DIR}/UTL/FileConverter/OGSFileConverter/OGSFileConverter.cpp
	${CMAKE_SOURCE_DIR}/UTL/FileConverter/OGSFileConverter/FileListDialog.cpp
	${CMAKE_SOURCE_DIR}/UTL/FileConverter/OGSFileConverter/ConversionTools.cpp
)

# Moc Header files
SET( MOC_HEADERS
	mainwindow.h
	${CMAKE_SOURCE_DIR}/UTL/FileConverter/OGSFileConverter/OGSFileConverter.h
	${CMAKE_SOURCE_DIR}/UTL/FileConverter/OGSFileConverter/FileListDialog.h
	${CMAKE_SOURCE_DIR}/UTL/FileConverter/OGSFileConverter/ConversionTools.h
)

# Header files
SET( HEADERS

)

# UI files
SET( UIS
	mainwindow.ui
	${CMAKE_SOURCE_DIR}/UTL/FileConverter/OGSFileConverter/OGSFileConverter.ui
	${CMAKE_SOURCE_DIR}/UTL/FileConverter/OGSFileConverter/FileList.ui
)


# Run Qts user interface compiler uic on .ui files
QT4_WRAP_UI( UI_HEADERS ${UIS} )

# Run Qts meta object compiler moc on header files
QT4_WRAP_CPP( MOC_SOURCES ${MOC_HEADERS} )

INCLUDE( ${VTK_USE_FILE} )

# Include the headers which are generated by uic and moc
# and include additional header
INCLUDE_DIRECTORIES(
	${CMAKE_BINARY_DIR}/Qt/Base
	${CMAKE_BINARY_DIR}/Qt/Gui
	${CMAKE_BINARY_DIR}/Qt/DataView
	${CMAKE_BINARY_DIR}/Qt/DataView/StratView
	${CMAKE_BINARY_DIR}/Qt/DataView/DiagramView
	${CMAKE_BINARY_DIR}/Qt/VtkVis
	${CMAKE_BINARY_DIR}/Qt/VtkAct
	${CMAKE_SOURCE_DIR}/Base
	${CMAKE_SOURCE_DIR}/MathLib
	${CMAKE_SOURCE_DIR}/GEO
	${CMAKE_SOURCE_DIR}/FileIO
	${CMAKE_SOURCE_DIR}/MSH
	${CMAKE_SOURCE_DIR}/MSHGEOTOOLS
	${CMAKE_SOURCE_DIR}/FEM
	${CMAKE_SOURCE_DIR}/Qt/Base
	${CMAKE_SOURCE_DIR}/Qt/DataView
	${CMAKE_SOURCE_DIR}/Qt/DataView/StratView
	${CMAKE_SOURCE_DIR}/Qt/DataView/DiagramView
	${CMAKE_SOURCE_DIR}/Qt/VtkVis
	${CMAKE_SOURCE_DIR}/Qt/VtkAct
	${CMAKE_SOURCE_DIR}/UTL/FileConverter/OGSFileConverter
)

IF (Shapelib_FOUND)
	INCLUDE_DIRECTORIES( ${Shapelib_INCLUDE_DIR} )
ENDIF () # Shapelib_FOUND

# Put moc files in a project folder
SOURCE_GROUP("UI Files" REGULAR_EXPRESSION "\\w*\\.ui")
SOURCE_GROUP("Moc Files" REGULAR_EXPRESSION "moc_.*")

# Create the library
ADD_EXECUTABLE( ogs-gui
	main.cpp
	${SOURCES}
	${HEADERS}
	${MOC_HEADERS}
	${MOC_SOURCES}
	${UIS}
)

TARGET_LINK_LIBRARIES( ogs-gui
	${QT_LIBRARIES}
	Base
	GEO
	FileIO
	MSH
	MSHGEOTOOLS
	FEM
	OGSProject
	QtBase
	QtDataView
	StratView
	VtkVis
	VtkAct
	vtkRendering
	vtkWidgets
	QVTK
)

IF(VTK_NETCDF_FOUND)
	TARGET_LINK_LIBRARIES( ogs-gui vtkNetCDF vtkNetCDF_cxx )
ELSE()
	TARGET_LINK_LIBRARIES( ogs-gui ${NETCDF_LIBRARIES} )
ENDIF()

IF (Shapelib_FOUND)
	TARGET_LINK_LIBRARIES( ogs-gui ${Shapelib_LIBRARIES} )
ENDIF () # Shapelib_FOUND

IF (libgeotiff_FOUND)
	TARGET_LINK_LIBRARIES( ogs-gui ${libgeotiff_LIBRARIES} )
ENDIF () # libgeotiff_FOUND

ADD_DEPENDENCIES ( ogs-gui VtkVis OGSProject )

IF(MSVC)
	# Set linker flags
	SET(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} /NODEFAULTLIB:MSVCRT")
ENDIF(MSVC)

IF(OGS_BUILD_INFO)
	ADD_DEFINITIONS(-DOGS_BUILD_INFO)
ENDIF() # OGS_BUILD_INFO

### OpenSG support ###
IF (OGS_USE_OPENSG)
	USE_OPENSG(ogs-gui)
	INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR}/Qt/OpenSG )
	TARGET_LINK_LIBRARIES( ogs-gui OgsOpenSG )
ENDIF (OGS_USE_OPENSG)

IF(OGS_USE_VRPN)
	INCLUDE_DIRECTORIES( ${CMAKE_SOURCE_DIR}/Qt/Vrpn ${CMAKE_BINARY_DIR}/Qt/Vrpn )
	TARGET_LINK_LIBRARIES( ogs-gui ${VRPN_LIBRARIES} OgsVrpn )
ENDIF()

###################
### VRED plugin ###
###################

IF (OGS_VRED_PLUGIN)

	ADD_DEFINITIONS(
		-DBOOST_PYTHON_DYNAMIC_LIB
	)

	INCLUDE_DIRECTORIES(
		#${VRED_DIR}/include/vred
    ${VRED_DIR}/include/boost-1.34-vc8.0
    ${VRED_DIR}/include/python-2.52-vc8.0
    #${VRED_DIR}/include/zlib-1.23
    #${VRED_DIR}/include/OpenSG
    #${VRED_DIR}/include/OpenSG/OpenSG
	)
	LINK_DIRECTORIES( ${VRED_DIR}/bin/WIN32 )

	ADD_LIBRARY( ogs-gui-vred SHARED
		${SOURCES}
		${HEADERS}
		${MOC_HEADERS}
		${MOC_SOURCES}
		${UIS}
		pymainwindow.cpp
	)
	TARGET_LINK_LIBRARIES( ogs-gui-vred
		${QT_LIBRARIES}
		GEO
		FileIO
		MSH
		FEM
		OGSProject
		QtBase
		QtDataView
		StratView
		${Shapelib_LIBRARIES}
		${libgeotiff_LIBRARIES}
		VtkVis
		VtkAct
		#boost_python-vc80-mt-1_34_1
	)

	ADD_DEPENDENCIES ( ogs-gui-vred VtkVis OGSProject )
ENDIF (OGS_VRED_PLUGIN)

####################
### Installation ###
####################

IF (OGS_PACKAGING)
	INSTALL (TARGETS ogs-gui RUNTIME DESTINATION bin COMPONENT ogs_gui)

	IF(MSVC)
		SET(OGS_GUI_EXE ${OGS_EXECUTABLE}-gui.exe)
	ELSE(MSVC)
		SET(OGS_GUI_EXE ${OGS_EXECUTABLE}-gui)
	ENDIF(MSVC)

	INCLUDE(GetPrerequisites)
	if (EXISTS ${OGS_GUI_EXE})
		GET_PREREQUISITES(${OGS_GUI_EXE} OGS_GUI_DEPENDENCIES 1 1 "/usr/local/lib;/;${VTK_DIR};${OpenSG_LIBRARY_DIRS}" "")
		MESSAGE (STATUS "ogs-gui depends on:")
		FOREACH(DEPENDENCY ${OGS_GUI_DEPENDENCIES})
			IF(NOT ${DEPENDENCY} STREQUAL "not") # Some bug on Linux?
				message("${DEPENDENCY}")
				GP_RESOLVE_ITEM ("/" "${DEPENDENCY}" ${OGS_GUI_EXE} "/usr/local/lib;/;${VTK_DIR}" DEPENDENCY_PATH)
				SET (DEPENDENCY_PATHS ${DEPENDENCY_PATHS} ${DEPENDENCY_PATH})
			ENDIF()
		ENDFOREACH (DEPENDENCY IN ${OGS_GUI_DEPENDENCIES})
		INSTALL (FILES ${DEPENDENCY_PATHS} DESTINATION bin COMPONENT ogs_gui)
	ENDIF (EXISTS ${OGS_GUI_EXE})
ENDIF (OGS_PACKAGING)